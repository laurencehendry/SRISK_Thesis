library(base)
library(rio) # swiss army knife for imports
library(plyr) # count occurences
library(dplyr) # data wrangling
library(tidyr) # data wrangling
library(ggplot2) # nice plots
library(stargazer) # nicer regression output which looks like a real publication
library(car) # scatterplots 
library(httr) # scraping from http sites
library(XML) # Tool for generating XML file
library(WDI) # Scraping Data from the World Bank
library(countrycode) # provides world bank country codes 
library(gplots)
library(plm)
library(knitr)
library(readstata13)
library(DataCombine)
library(lubridate)
library(strucchange)
library(plm)

setwd("/Users/laurencehendry/GoogleDrive/Master Thesis - Shared/Quantitative Sources/Special Folder/R Laurence Folder - 20.1.16")

############################
## .DTA from STATA as .CSV Import
############################
#import the .csv from STATA 13 (HolyGrail)
#rename variables correctly 
names(RHolyGrail)[1] <-'days'
names(RHolyGrail)[2] <-'MES'
names(RHolyGrail)[3] <-'dailyvariance'
names(RHolyGrail)[4] <-'mscibeta'
names(RHolyGrail)[5] <-'mscicorrelation'
names(RHolyGrail)[6] <-'firmleverage'
names(RHolyGrail)[7] <-'srisk'
names(RHolyGrail)[8] <-'marketcap'

#remove incorrectly formatted data columns
RHolyGrail[9]<- NULL
RHolyGrail[10] <- NULL
RHolyGrail$edate1 <- NULL

#get R to read dates correctly
RHolyGrail$Date <- as.Date(RHolyGrail$days, origin = '1900-01-01')

#get a summary of the variables
summary(RHolyGrail)

############################
## Declaring the unit, for time series study
############################

#attempting to find an equivalent command to xtset 
#stumbled upon: http://www.rdocumentation.org/packages/qogdata/functions/xtset
#but 'xtset' does not appear supported in the plm package
xtset(dataset = RHolyGrail,
  data = c("code_ordinal", "Date"),
  spec = c("tradingname_ordinal", "days"),
  name = "srisk for companies, time series data")

############################
## Structural Break test
############################
##Structural Break test, see p.56-7 https://cran.r-project.org/web/packages/strucchange/strucchange.pdf 
sctest(RHolyGrail$srisk ~ RHolyGrail$Date + RHolyGrail$EU_CRR, type = "Chow", point =7)

############################
## Plotting
############################

plot(RHolyGrail$srisk)

srisk_ts <- ts(RHolyGrail$srisk)
plot.ts(srisk_ts)

############################
## Write to .CSV file
############################
write.table(RHolyGrail, file = "RHolyGrail_worked.csv", row.names=TRUE, sep = ",")


############################
## Generate nice summary statistics
############################
library(sjPlot) # http://strengejacke.de/sjPlot/ 
#taking Aberdeen Asset Management as our example

sjp.setTheme(theme = "scatter",
             geom.label.size = 3.5,
             geom.label.color = "black",
             axis.textsize = .8,
             axis.title.size = .9)

sjp.frq(RHolyGrail$country_ordinal, 
        sort.frq = "asc",
        axisTitle.x = "Country",
        axisTitle.y = "Number of Observations",
        coord.flip = TRUE,
        labelPos = "outside")

#Sub-set our data
RHolyGrail_subset1 <- subset(RHolyGrail, code_ordinal=="ADN_LN")
sjp.frq(RHolyGrail_subset1$firmleverage,
        RHolyGrail_subset1$days,
        type = "dens",
        showNormalCurve = TRUE,
        normalCurveAlpha = .3,
        axisTitle.x = "Time",
        axisTitle.y = "Leverage",
        labelPos = "outside")

plot(RHolyGrail_subset1$firmleverage,
     RHolyGrail_subset1$days)

############################
## Generate nice chronological graphs
############################
library(timeSeries)
library(timeDate)

par(mar = c(bottom=2, 5.1, top=3, 2.1))
plot(RHolyGrail_subset1$Date, RHolyGrail_subset1$srisk)

sjp.setTheme(theme = "scatter",
             geom.label.size = 3.5,
             axis.title.size = .85,
             legend.size = .8,
             legend.title.size = .8,
             legend.pos = "right")

sjp.scatter(RHolyGrail_subset1$Date, 
            RHolyGrail_subset1$firmleverage, 
            showRug = TRUE, 
            title = "Aberdeen Asset Management Leverage Ratio over time", 
            axisTitle.x = "Time", 
            axisTitle.y = "Leverage Ratio", 
            showGroupFitLine = TRUE, 
            fitmethod = "loess", 
            showTotalFitLine = TRUE)
